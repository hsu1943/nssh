#!/bin/bash

# nssh - A powerful SSH connection manager
# - Supports complex password/2FA logins via expect engines from nssh_config.
# - Supports native SSH logins (e.g., key-based) from ~/.ssh/config.
# - Provides a unified host list and intelligent routing.

# --- Configuration ---
NSSH_CONFIG_FILE="${HOME}/.ssh/nssh_config"
SSH_CONFIG_FILE="${HOME}/.ssh/config"
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
# ---------------------

# --- Functions ---

show_help() {
  echo "nssh - A powerful SSH connection manager"
  echo ""
  echo "Usage: nssh <host_alias> [ssh_options...]"
  echo "   or: nssh [-l | --list]"
  echo "   or: nssh [-h | --help]"
  echo ""
  echo "Commands:"
  echo "  <host_alias>       Connect to a specific host alias. nssh intelligently"
  echo "                     determines whether the host is defined in nssh_config"
  echo "                     or ssh/config and uses the appropriate login method."
  echo ""
  echo "  -l, --list         List all available hosts (merged from nssh_config and"
  echo "                     ssh/config) and provide an interactive selection."
  echo ""
  echo "  -h, --help         Display this help message."
  echo ""
  echo "Arguments:"
  echo "  [ssh_options...]   Any additional standard SSH options (e.g., -L, -R, command)"
  echo "                     that will be passed through to the underlying"
  echo "                     ssh command or expect script."
  echo ""
  echo "Configuration Files:"
  echo "  - For special logins (Password/2FA): ${NSSH_CONFIG_FILE}"
  echo "  - For native logins (Key-based, etc.): ${SSH_CONFIG_FILE}"
  exit 0
}

# Function to connect to a host defined in nssh_config (using expect)
connect_with_expect() {
  local host_alias_to_connect="$1"
  shift 
  declare host_hostname="" host_user="" host_port="" host_pass="" host_logintype=""

  host_config_block=$(awk -v alias="$host_alias_to_connect" '
    BEGIN { record=0 }
    $1 == "Host" && $2 == alias { record=1; next }
    $1 == "Host" && $2 != alias { record=0 }
    record { print }
  ' "$NSSH_CONFIG_FILE")

  if [ -z "$host_config_block" ]; then echo "Error: Alias '$host_alias_to_connect' not found in $NSSH_CONFIG_FILE." >&2; exit 1; fi

  while IFS= read -r line; do
    line=$(echo "$line" | awk '{$1=$1};1'); if [[ -z "$line" || "$line" == \#* ]]; then continue; fi
    key=$(echo "$line" | awk '{print $1}'); value=$(echo "$line" | awk '{$1=""; print $0}' | sed 's/^[ \t]*//')
    case "$key" in
      HostName) host_hostname="$value" ;; User) host_user="$value" ;;
      Port) host_port="$value" ;; Pass) host_pass="$value" ;;
      LoginType) host_logintype="$value" ;;
    esac
  done <<< "$host_config_block"

  if [ -z "$host_hostname" ]; then echo "Error: 'HostName' not found for alias '$host_alias_to_connect'." >&2; exit 1; fi
  if [ -z "$host_pass" ]; then echo "Error: 'Pass' not found for alias '$host_alias_to_connect'." >&2; exit 1; fi
  if [ -z "$host_port" ]; then host_port="22"; fi
  if [ -z "$host_user" ]; then host_user="$USER"; fi
  
  local expect_script_to_run=""
  case "$host_logintype" in
    jumpserver) expect_script_to_run="${SCRIPT_DIR}/login_jumpserver.exp" ;;
    bastion_2fa_ali) expect_script_to_run="${SCRIPT_DIR}/login_bastion_2fa_ali.exp" ;;
    "" | "password") expect_script_to_run="${SCRIPT_DIR}/login_password.exp" ;;
    *) echo "Error: Unknown LoginType '$host_logintype' for alias '$host_alias_to_connect'." >&2; exit 1 ;;
  esac

  if [ ! -f "$expect_script_to_run" ]; then echo "Error: Login script '$expect_script_to_run' not found." >&2; exit 1; fi
  if ! command -v expect &> /dev/null; then echo "Error: 'expect' command not found. Please install it." >&2; exit 1; fi

  # Use a more generic type for display if empty
  local display_type=${host_logintype:-password}
  echo "Connecting to '$host_alias_to_connect' (using expect engine: $display_type)..."
  exec "$expect_script_to_run" "$host_hostname" "$host_user" "$host_port" "$host_pass" "$@"
}


# This function parses both config files and populates two global arrays:
# host_order (an indexed array for order) and hosts_info (an associative array for details).
get_all_hosts() {
  # 1. Parse nssh_config using a more robust, multi-step approach.
  if [ -f "$NSSH_CONFIG_FILE" ]; then
    local nssh_aliases
    nssh_aliases=$(grep -E "^\s*Host\s+" "$NSSH_CONFIG_FILE" | awk '{print $2}')

    for alias in $nssh_aliases; do
      if [[ "$alias" != "*" && -z "${hosts_info[$alias]}" ]]; then
        local block
        block=$(awk -v alias_to_find="$alias" '
                  $1=="Host" && $2==alias_to_find {p=1}
                  $1=="Host" && $2!=alias_to_find {p=0}
                  p' "$NSSH_CONFIG_FILE")
        
        local logintype
        logintype=$(echo "$block" | grep -E "^\s*LoginType\s+" | awk '{print $2}')
        
        # If LoginType is empty, default to "password".
        if [ -z "$logintype" ]; then
          logintype="password"
        fi

        # Map the found LoginType to a user-friendly label.
        local label
        case "$logintype" in
          jumpserver)      label="Jumpserver" ;;
          bastion_2fa_ali) label="Aliyun 2FA" ;;
          "password")      label="Password" ;;
          *)               label="Custom (${logintype})" ;;
        esac
        
        hosts_info[$alias]="$label"
        host_order+=("$alias")
      fi
    done
  fi

  # 2. Parse ssh/config for native hosts.
  if [ -f "$SSH_CONFIG_FILE" ]; then
    while read -r alias; do
      if [[ "$alias" != "*" && -z "${hosts_info[$alias]}" ]]; then
        hosts_info[$alias]="Key-based (Native)"
        host_order+=("$alias")
      fi
    done < <(grep -E "^\s*Host\s+" "$SSH_CONFIG_FILE" | awk '{print $2}')
  fi
}


# --- Main Logic ---

# Handle primary commands first
if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
  show_help
fi

if [[ "$1" == "-l" || "$1" == "--list" ]]; then
    shift
    declare -A hosts_info
    declare -a host_order
    get_all_hosts # Call the function to populate the arrays.

    if [ ${#host_order[@]} -eq 0 ]; then
      echo "No hosts configured in $NSSH_CONFIG_FILE or $SSH_CONFIG_FILE."
      exit 0
    fi

    # Now, with the arrays populated, start the user interaction.
    echo "Available hosts:"
    echo "--------------------------------------------------------"
    printf "%-5s %-25s %-20s\n" "NUM" "HOST ALIAS" "LOGIN TYPE"
    echo "--------------------------------------------------------"
    for i in "${!host_order[@]}"; do
      alias="${host_order[i]}"
      type_label="${hosts_info[$alias]}"
      printf "%3d)  %-25s [%s]\n" "$((i+1))" "$alias" "$type_label"
    done
    echo "--------------------------------------------------------"
    echo ""

    choice=""
    while true; do
      read -r -p "Enter number to connect (or 'q' to quit): " choice
      if [[ "$choice" == "q" || "$choice" == "Q" ]]; then echo "Exiting."; exit 0; fi
      if [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le "${#host_order[@]}" ]; then
        selected_alias="${host_order[$((choice-1))]}"
        exec "$0" "$selected_alias" "$@"
      else
        echo "Invalid selection. Please try again."
      fi
    done
    exit 0
fi

# Default behavior: route the connection based on the host alias
HOST_ALIAS_ARG="$1"
shift

if [ -f "$NSSH_CONFIG_FILE" ] && grep -q -E "^\s*Host\s+${HOST_ALIAS_ARG}\s*$" "$NSSH_CONFIG_FILE"; then
  # nssh_config
  connect_with_expect "$HOST_ALIAS_ARG" "$@"
elif [ -f "$SSH_CONFIG_FILE" ] && grep -q -E "^\s*Host\s+${HOST_ALIAS_ARG}\s*$" "$SSH_CONFIG_FILE"; then
  # native ssh config
  echo "Connecting to '$HOST_ALIAS_ARG' (using native ssh)..."
  exec ssh "$HOST_ALIAS_ARG" "$@"
else
  # host not found
  echo "Error: Host alias '$HOST_ALIAS_ARG' not found in configuration files." >&2
  echo "Checked: $NSSH_CONFIG_FILE" >&2
  echo "Checked: $SSH_CONFIG_FILE" >&2
  exit 1
fi

